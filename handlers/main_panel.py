from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from keyboards.inline import choice_account


router = Router()


# --- StatesGroup –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ ---


class AddSeller(StatesGroup):
    company_name = State()
    phone = State()


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å ---


@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –¥–ª—è <b>—Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤</b>\
        \n\n–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö—Ç–æ –≤—ã?",
        reply_markup=choice_account().as_markup()
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ —Ä–∞–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è ---


@router.callback_query(F.data == "i_am_buyer")
async def i_am_buyer_btn(callback: CallbackQuery):
    pool = callback.bot.pool

    async with pool.acquire() as connection:
        async with connection.transaction():
            await connection.execute(
                "INSERT INTO buyers (user_id, username, purchased) VALUES ($1, $2, $3) ON CONFLICT (user_id) DO NOTHING",
                callback.from_user.id,
                callback.from_user.username,
                0
            )
            username = await connection.fetchval(
                "SELECT username from buyers WHERE user_id = $1",
                callback.from_user.id
            )

    await callback.message.answer(
        text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{username}</b>!",
        reply_markup=None
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ —Ä–∞–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ ---


@router.callback_query(F.data == "i_am_seller")
async def i_am_seller_btn(callback: CallbackQuery, state: FSMContext):
    pool = callback.bot.pool

    async with pool.acquire() as connection:
        async with connection.transaction():
            username = await connection.fetchval(
                "SELECT username from staff WHERE user_id = $1",
                callback.from_user.id
            )
            if username is None:
                await callback.message.answer(
                    text="–ü–æ—Ö–æ–∂–µ —É –í–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ üò•\n\n–ù–µ —Å—Ç—Ä–∞—à–Ω–æ! –ú—ã —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n<b>–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –í–∞—à–∞ —Ñ–∏—Ä–º–∞?</b>\n<i>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–∞—Ç:</i>",
                    reply_markup=None
                )
                await state.set_state(AddSeller.company_name)
            else:
                await callback.message.answer(
                    text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—Ä–æ–¥–∞–≤–µ—Ü <b>{username}</b>!",
                    reply_markup=None
                )


# --- –°—Ç–∞–¥–∏—è 1. –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏—Ä–º—ã ---


@router.message(AddSeller.company_name)
async def get_company_name(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id

    if user_id not in data:
        data[user_id] = {}

    data[user_id]['name'] = message.text[:50]
    await state.update_data(data)
    await message.answer(
        text=f"<b>{message.text[:50]}?</b> ‚Äî –∑–≤—É—á–∏—Ç –æ—Ç–ª–∏—á–Ω–æ!\n\n<b>–ù–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –í–∞—à –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞,</b> –Ω–æ –º—ã –Ω–∏–∫–æ–º—É –µ–≥–æ –Ω–µ —Å–∫–∞–∂–µ–º üòâ\n<i>–í–≤–µ–¥–∏—Ç–µ –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:</i>",
        reply_markup=None
    )
    await state.set_state(AddSeller.phone)


# --- –°—Ç–∞–¥–∏—è 2. –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---


import re

@router.message(AddSeller.phone)
async def get_company_name(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id

    phone_number = re.sub(r'[\s+]', '', message.text)
    if re.match(r'^\d{11}$', phone_number):
        formatted_phone_number = f"+7 ({phone_number[1:4]}) {phone_number[4:7]}-{phone_number[7:9]}-{phone_number[9:]}"

        await state.update_data(data)
        await message.answer(
            text=f"<b>–ü–æ–¥—ã—Ç–æ–∂–∏–º:</b>\n\
            \n‚úÖ –í–∞—à —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: @{message.from_user.username}\
            \n‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã: <i>{data[user_id]['name']}</i>\
            \n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{formatted_phone_number}</i>\
            \n\n<i>–ú—ã –ø–æ–∫–∞–∂–µ–º –≤–∞—à —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç —Ä—è–¥–æ–º —Å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º.</i>",
            reply_markup=None
        )
        print(data)
        await state.clear()
    else:
        await message.answer("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 11 —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:")




# --- –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥—è–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏—è—Ö ---


@router.message(lambda message: not message.text, AddSeller.company_name)
@router.message(lambda message: not message.text, AddSeller.phone)
async def ignore_messages(message: Message):
    pass