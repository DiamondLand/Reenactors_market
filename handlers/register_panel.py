from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext

from keyboards.inline import *
from configs.answers import *
from .states_group import AddSeller, not_in_state_filter, cancel_func


router = Router()


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å ---


@router.message(not_in_state_filter, Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –¥–ª—è <b>—Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤</b> üíñ\
        \n\n–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö—Ç–æ –≤—ã?",
        reply_markup=choice_account().as_markup()
    )


# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è ---


@router.message(F.text == cancel_button_kb)
async def cancel_handler(message: Message, state: FSMContext):
    await cancel_func(message=message, state=state)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è ---


@router.callback_query(not_in_state_filter, F.data == "i_am_buyer")
async def i_am_buyer_btn(callback: CallbackQuery):
    pool = callback.bot.pool

    async with pool.acquire() as connection:
        async with connection.transaction():
            await connection.execute(
                "INSERT INTO buyers (user_id, username, purchased) VALUES ($1, $2, $3) ON CONFLICT (user_id) DO NOTHING",
                callback.from_user.id,
                callback.from_user.username,
                0
            )

    await callback.message.edit_text(
        text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{callback.from_user.username}!\n\n–í—ã ‚Äî –ø–æ–∫—É–ø–∞—Ç–µ–ª—å\n\n<i>–•–æ—Ç–∏—Ç–µ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω? üòä</i>",
        reply_markup=None
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ ---


@router.callback_query(not_in_state_filter, F.data == "i_am_seller")
async def i_am_seller_btn(callback: CallbackQuery, state: FSMContext):
    pool = callback.bot.pool

    async with pool.acquire() as connection:
        async with connection.transaction():
            username = await connection.fetchval(
                "SELECT username from staff WHERE user_id = $1",
                callback.from_user.id
            )
            if username is None:
                await callback.message.edit_text(
                    text="–ü–æ—Ö–æ–∂–µ —É –í–∞—Å <b>–Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞</b>, –Ω–æ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ! –ú—ã —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üòé",
                    reply_markup=None
                )

                # --- –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã [cancel] ---
                kb = [[KeyboardButton(text=cancel_button_kb)]]
                keyboard = ReplyKeyboardMarkup(
                    keyboard=kb,
                    resize_keyboard=True,
                    input_field_placeholder="–ü—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã"
                )

                await callback.message.answer(
                    text="<b>–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –í–∞—à–∞ —Ñ–∏—Ä–º–∞?</b>\
                    \n\n<i>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–∞—Ç:</i>",
                    reply_markup=keyboard
                )
                await state.set_state(AddSeller.company_name)
            else:
                await callback.message.edit_text(
                    text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n\n–í—ã ‚Äî –ø—Ä–æ–¥–∞–≤–µ—Ü\n\n<i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–∫–∞–∑—ã üòé</i>",
                    reply_markup=None
                )


# --- –°—Ç–∞–¥–∏—è 1. –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏—Ä–º—ã ---


@router.message(AddSeller.company_name)
async def get_company_name(message: Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer(text=slash_on_state)
    else:
        data = await state.get_data()        
        data['name'] = message.text[:50]

        await state.update_data(data)
        await message.answer(
            text=f"<b>{message.text[:50]}?</b> ‚Äî –∑–≤—É—á–∏—Ç –æ—Ç–ª–∏—á–Ω–æ!\
            \n\n<b>–ù–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞,</b> –Ω–æ –º—ã –Ω–∏–∫–æ–º—É –ø—Ä–æ —ç—Ç–æ –Ω–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º üòâ\
            \n\n<i>–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∞ –¥–∞–ª—å—à–µ –ø–æ–∑–∞–±–æ—Ç–∏–º—Å—è –º—ã:</i>"
        )
        await state.set_state(AddSeller.phone)


# --- –°—Ç–∞–¥–∏—è 2. –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---


import re

@router.message(AddSeller.phone)
async def get_company_name(message: Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer(text=slash_on_state)
    else:
        data = await state.get_data()

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ ---
        if not data:
            await message.answer(text=no_state)
            return
        
        phone_number = re.sub(r'[\s+]', '', message.text)
        if re.match(r'^\d{11}$', phone_number):
            formatted_phone_number = f"+7 ({phone_number[1:4]}) {phone_number[4:7]}-{phone_number[7:9]}-{phone_number[9:]}"

            data['formatted_phone_number'] = formatted_phone_number
            await state.update_data(data)
            await message.answer(
                text=f"<b>–ü–æ–¥—ã—Ç–æ–∂–∏–º:</b>\
                \n\n‚úÖ –í–∞—à —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç: @{message.from_user.username}\
                \n‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã: <i>{data['name']}</i>\
                \n‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <i>{data['formatted_phone_number']}</i>\
                \n\n<i>–ú—ã –ø–æ–∫–∞–∂–µ–º –≤–∞—à —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç —Ä—è–¥–æ–º —Å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º.</i>",
                reply_markup=accepting_seller_account_creating().as_markup()
            )
        else:
            await message.answer("‚ùå <b>–ù–µ—Ç-–Ω–µ—Ç-–Ω–µ—Ç!</b>\n\n–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ <b>11 —Ü–∏—Ñ—Ä</b>.\n\n<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:</i>")



# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ ---


@router.callback_query(F.data == "accept_seller_account_creating")
async def accept_seller_account_creating_btn(callback: CallbackQuery, state: FSMContext):
    pool = callback.bot.pool
    data = await state.get_data()

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ ---
    if not data:
        await callback.message.answer(text=no_state)
        return
    
    user_id = callback.from_user.id

    async with pool.acquire() as connection:
        async with connection.transaction():
            await connection.execute(
                "INSERT INTO staff (user_id, username, company_name, phone, sold, post) VALUES ($1, $2, $3, $4, $5, $6) ON CONFLICT (user_id) DO NOTHING",
                user_id,
                callback.from_user.username,
                data['name'],
                data['formatted_phone_number'],
                0,
                "seller"
            )

    await state.clear()
    await callback.message.edit_text(
        text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{callback.from_user.username}!\n\n–í—ã ‚Äî –ø—Ä–æ–¥–∞–≤–µ—Ü\n\n<i>–ù–µ –∑–∞—Ç—è–≥–∏–≤–∞–π—Ç–µ, –≤—ã—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã! üíñ</i>",
        reply_markup=None
    )
    await callback.message.answer(
        text="‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–æ–ª–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!",
        reply_markup=ReplyKeyboardRemove()
    )
    

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ ---


@router.callback_query(F.data == "refresh_seller_account_creating")
async def accept_seller_account_creating_btn(callback: CallbackQuery, state: FSMContext):
    # --- –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã [cancel] ---
    kb = [[KeyboardButton(text=cancel_button_kb)]]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ü—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã"
    )

    await callback.message.edit_text(
        text="–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º, –∑–∞–ø–æ–ª–Ω–∏–º —Ñ–æ—Ä–º—É –∑–∞–Ω–æ–≤–æ üòò",
        reply_markup=None
    )
    await callback.message.answer(
        text="<b>–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –í–∞—à–∞ —Ñ–∏—Ä–º–∞?</b>\
        \n\n<i>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–∞—Ç:</i>",
        reply_markup=keyboard
    )
    await state.set_state(AddSeller.company_name)