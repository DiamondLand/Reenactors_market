import httpx

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext

from keyboards.inline import support_panel_btns, open_chat_with_support_btn, on_chat_with_support_btn
from configs.answers import *
from .states_group import SupportConnect, not_in_state_filter, cancel_func


router = Router()


# --- –ü–∞–Ω–µ–ª—å —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ---
@router.message(not_in_state_filter, Command("support"))
async def cmd_support(message: Message):
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ insert ---
    async with httpx.AsyncClient() as client:
        await client.post(message.bot.config["SETTINGS"]["backend_url"] + 'create_buyer', json={
            "user_id" : message.from_user.id,
            'username': message.from_user.username
        })
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ ---
        privilege_res = await client.get(
            f"{message.bot.config['SETTINGS']['backend_url']}get_privilege?user_id={message.from_user.id}"
        )
        if privilege_res.json() == 'admin' or privilege_res.json() == 'support':
            await message.answer(
                f"üíå <b>–ì–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?</b>\
                \n\n–í—ã ‚Äî –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–≤—è–∑—å —Å–æ —Å–≤–æ–∏–º–∏ –∫–æ–ª–ª–µ–≥–∞–º–∏ —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω—ã–π —á–∞—Ç –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è üòâ\
                \n\n<i>–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–π, –¥–∞–±—ã —Ä–µ—à–∏—Ç—å –≤–æ–∑–Ω–∏–∫—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã!</i>",
                reply_markup=support_panel_btns().as_markup()
            )
        else:
            await message.answer(
                f"üíå <b>–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ú—ã –≤—Å—ë —Ä–µ—à–∏–º!</b>\
                \n\n<i>–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ —Ñ–æ—Ä–º–µ (–∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç, –∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç).</i>",
                reply_markup=open_chat_with_support_btn().as_markup()
            )


# --- –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ---
@router.message(F.text == cancel_button_kb)
async def cancel_connect_with_support_handler(message: Message, state: FSMContext):
    await cancel_func(message=message, state=state)
    await message.answer(
        "‚úÖ –ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
        reply_markup=ReplyKeyboardRemove()
    )
    await cmd_support(message)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ –æ–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ---
@router.callback_query(not_in_state_filter, F.data == "open_chat_with_support")
async def chat_with_support_btn(callback: CallbackQuery):
    # # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ---
    # async with httpx.AsyncClient() as client:
    #     res = await client.get(
    #         f"{callback.bot.config['SETTINGS']['backend_url']}get_messages_on_support?user_id={callback.from_user.id}"
    #     )
    await callback.message.edit_text(
        "<b>–≠—Ç–æ <u>–ø–µ—Ä–≤–∞—è</u> —Å—Ç—Ä–∞–Ω–∏—Ü–∞</b>",
        reply_markup=on_chat_with_support_btn().as_markup()
    )

    # if callback.message.text.startswith("/"):
    #     await callback.message.answer(text=slash_on_state)
    # else:
        
        

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ---
@router.callback_query(not_in_state_filter, F.data == "wrtite_to_support")
async def wrtite_to_support_btn(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SupportConnect.support_text)
    # --- –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã [cancel] ---
    kb = [[KeyboardButton(text=cancel_button_kb)]]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ü—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã"
    )
    await callback.message.answer(text="‚úÖ", reply_markup=keyboard)
    await callback.message.delete()

