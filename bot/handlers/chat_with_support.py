import httpx

from datetime import datetime
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext

from keyboards.inline import support_panel_btns, on_chat_with_support_btn, on_chat_with_support_buyer_btn
from configs.answers import *
from configs.states_group import SupportConnect, not_in_state_filter, cancel_func


router = Router()
user_question_indices = {}
messages_response = {}


# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ø–∞–Ω–µ–ª–µ ---
async def display_question(res, msg: Message = None, callback: CallbackQuery = None):
    if res['answer']:
        answer_text = f"üì• <b>–û—Ç–≤–µ—Ç–∏–ª: @{res['answer_username']}</b>\
        \n<i>{res['answer']}</i>\
        \n\n‚åö <b>–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω </b>\n<i>{datetime.fromisoformat(res['answer_date']).strftime('%m-%d-%Y %H:%M:%S –ø–æ –ú–°–ö')}</i>"

    all_text = f"üì§ <b>–í–∞—à –≤–æ–ø—Ä–æ—Å:</b>\
        \n<i>{res['question']}</i>\
        \n\n‚åö <b>–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å </b>\n<i>{datetime.fromisoformat(res['question_date']).strftime('%m-%d-%Y %H:%M:%S –ø–æ –ú–°–ö')}</i>\
        \nn{answer_text if res['answer'] is not None else '–û—Ç–≤–µ—Ç –µ—â—ë –Ω–µ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–∞—à –≤–æ–ø—Ä–æ—Å –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏! üòé'}"
    
    if msg:
        await msg.answer(
            text=all_text,
            reply_markup=on_chat_with_support_btn().as_markup()
        )

    if callback:
        await callback.message.edit_text(
            text=all_text,
            reply_markup=on_chat_with_support_btn().as_markup()
        )


# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤  –ø–∞–Ω–µ–ª–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ---
async def display_question_for_support(res, callback: CallbackQuery):
    all_text = f"üì• <b>–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\
        \n<i>{res['question']}</i>\
        \n\n‚åö <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞—Ç–∏–ª—Å—è </b>\n<i>{datetime.fromisoformat(res['question_date']).strftime('%m-%d-%Y %H:%M:%S –ø–æ –ú–°–ö')}</i>"

    if callback:
        await callback.message.edit_text(
            text=all_text,
            reply_markup=on_chat_with_support_buyer_btn().as_markup()
        )


# --- –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ---
@router.message(F.text == cancel_support_write_button_kb)
async def cancel_connect_with_support_handler(message: Message, state: FSMContext):
    await cancel_func(message=message, state=state)
    await message.answer(
        "<b>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ!</b>\n\n–í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
        reply_markup=ReplyKeyboardRemove()
    )
    await cmd_support(message)


# --- –ü–∞–Ω–µ–ª—å —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ---
@router.message(not_in_state_filter, Command("support"))
async def cmd_support(message: Message):
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ insert ---
    async with httpx.AsyncClient() as client:
        buyer_response = await client.post(message.bot.config["SETTINGS"]["backend_url"] + 'create_buyer', json={
            "user_id": message.from_user.id,
            'username': message.from_user.username
        })
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ ---
        privilege_res = await client.get(
            f"{message.bot.config['SETTINGS']['backend_url']}get_privilege?user_id={message.from_user.id}"
        )
        if buyer_response.status_code == 200 and privilege_res.status_code == 200:
            if privilege_res.json() == 'admin' or privilege_res.json() == 'support':
                await message.answer(
                    f"üíå <b>–ì–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?</b>\
                    \n\n–í—ã ‚Äî –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–≤—è–∑—å —Å–æ —Å–≤–æ–∏–º–∏ –∫–æ–ª–ª–µ–≥–∞–º–∏ —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω—ã–π —á–∞—Ç –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è üòâ\
                    \n\n<i>–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–π, –¥–∞–±—ã —Ä–µ—à–∏—Ç—å –≤–æ–∑–Ω–∏–∫—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã!</i>",
                    reply_markup=support_panel_btns().as_markup()
                )
            else:
                async with httpx.AsyncClient() as client:
                    response = await client.get(
                        f"{message.bot.config['SETTINGS']['backend_url']}get_messages_on_support?user_id={message.from_user.id}"
                    )

                if response.status_code == 200:
                    messages = response.json()
                    messages_response[message.from_user.id] = messages
                    user_question_indices[message.from_user.id] = 0
                    if messages and len(messages) > 0:
                        await display_question(res=messages[0], msg=message)
                    else:
                        await message.answer(
                            text="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
                            reply_markup=on_chat_with_support_btn().as_markup()
                        )
                else:
                    await message.answer(text=response_server_error) 
        else:
            await message.answer(text=response_server_error) 
    

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ –î–ê–õ–ï–ï ---
@router.callback_query(not_in_state_filter, F.data == "next_on_chat_with_support")
async def next_question_to_support_btn(callback: CallbackQuery):
    user_id = callback.from_user.id
    messages = messages_response[user_id]
    current_index = user_question_indices.get(user_id, 0)

    if messages and len(messages) > current_index + 1:
        user_question_indices[user_id] = current_index + 1
        await display_question(res=messages[current_index + 1], callback=callback)
    else:
        await callback.answer(
            text="–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!", 
            show_alert=True
        )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ –ù–ê–ó–ê–î ---
@router.callback_query(not_in_state_filter, F.data == "back_on_chat_with_support")
async def next_question_to_support_btn(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_question_indices.get(user_id) is not None:
        current_index = user_question_indices[user_id]
        if current_index > 0:
            user_question_indices[user_id] -= 1
            messages = messages_response[user_id]
            await display_question(res=messages[current_index - 1], callback=callback)
        else:
            await callback.answer(
                text="–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!", 
                show_alert=True
            )
    else:
        await callback.answer(
            text="–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!", 
            show_alert=True
        )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã ---
@router.callback_query(not_in_state_filter, F.data == "chat_with_support")
async def chat_with_support_btn(callback: CallbackQuery):
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ insert ---
    async with httpx.AsyncClient() as client:
        buyer_response = await client.post(callback.bot.config["SETTINGS"]["backend_url"] + 'create_buyer', json={
            "user_id": callback.from_user.id,
            'username': callback.from_user.username
        })
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ ---
        privilege_res = await client.get(
            f"{callback.bot.config['SETTINGS']['backend_url']}get_privilege?user_id={callback.from_user.id}"
        )
        if buyer_response.status_code == 200 and privilege_res.status_code == 200:
            if privilege_res.json() == 'admin' or privilege_res.json() == 'support':
                async with httpx.AsyncClient() as client:
                    response = await client.get(
                        f"{callback.bot.config['SETTINGS']['backend_url']}get_messages_on_support_for_staff"
                    )

                if response.status_code == 200:
                    messages = response.json()
                    messages_response[callback.from_user.id] = messages
                    user_question_indices[callback.from_user.id] = 0
                    if messages and len(messages) > 0:
                        await display_question_for_support(res=messages[0], callback=callback)
                    else:
                        await callback.message.edit_text(
                            text="–ù–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–æ! –û—Ç–¥—ã—Ö–∞–µ–º ü§©", 
                            reply_markup=None
                        )
                else:
                    await callback.message.edit_text(text=response_server_error)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ –î–ê–õ–ï–ï –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ---
@router.callback_query(not_in_state_filter, F.data == "next_on_chat_with_support_buyer")
async def next_question_to_support_btn(callback: CallbackQuery):
    user_id = callback.from_user.id
    messages = messages_response[user_id]
    current_index = user_question_indices.get(user_id, 0)

    if messages and len(messages) > current_index + 1:
        user_question_indices[user_id] = current_index + 1
        await display_question_for_support(res=messages[current_index + 1], callback=callback)
    else:
        await callback.answer(
            text="–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!", 
            show_alert=True
        )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ –ù–ê–ó–ê–î –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ---
@router.callback_query(not_in_state_filter, F.data == "back_on_chat_with_support_buyer")
async def next_question_to_support_btn(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_question_indices.get(user_id) is not None:
        current_index = user_question_indices[user_id]
        if current_index > 0:
            user_question_indices[user_id] -= 1
            messages = messages_response[user_id]
            await display_question_for_support(res=messages[current_index - 1], callback=callback)
        else:
            await callback.answer(
                text="–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!", 
                show_alert=True
            )
    else:
        await callback.answer(
            text="–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!", 
            show_alert=True
        )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ---
@router.callback_query(not_in_state_filter, F.data == "wrtite_to_support")
async def wrtite_to_support_btn(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SupportConnect.to_support_text)
    # --- –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã [cancel] ---
    kb = [[KeyboardButton(text=cancel_support_write_button_kb)]]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ü—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã"
    )
    await callback.message.edit_text(
        text="üíå <b>–¢–∞–∫-—Ç–∞–∫. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º!</b>\
        \n\n–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É. –ß–µ–º –ª—É—á—à–µ –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω –≤–æ–ø—Ä–æ—Å, —Ç–µ–º –±–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã!",
        reply_markup=None
    )
    await callback.message.answer(
        text="<i>–ü–æ–º–Ω–∏—Ç–µ, –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî 1.500. –¢–µ–∫—Å—Ç –±–æ–ª—å—à–µ –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω!</i>",
        reply_markup=keyboard
    )


# --- –°—Ç–∞–¥–∏—è 1. –ü–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ---
@router.message(SupportConnect.to_support_text)
async def write_to_support_text(message: Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer(text=slash_on_state)
    else:
        async with httpx.AsyncClient() as client:            
            response = await client.post(
                f"{message.bot.config['SETTINGS']['backend_url']}send_question", json={
                    'user_id': message.from_user.id,
                    'question': message.text[:1500]
                })

        await state.clear()
        del messages_response[message.from_user.id]
        del user_question_indices[message.from_user.id]
        if response.status_code == 200:
            await message.answer(
                text=f"‚úÖ <b>–í–æ–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω!</b>\n\n<i>{message.text[:1500]}</i>\n\n<i>–û—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø–∞–Ω–µ–ª–µ –∑–∞–ø—Ä–æ—Å–æ–≤ /support üíï</i>",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await message.answer(text=response_server_error, reply_markup=ReplyKeyboardRemove())
        


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
@router.callback_query(not_in_state_filter, F.data == "wrtite_to_buyer_support")
async def wrtite_to_buyer_support_btn(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SupportConnect.to_buyer_text)
    # --- –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã [cancel] ---
    kb = [[KeyboardButton(text=cancel_support_write_button_kb)]]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ü—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã"
    )
    await callback.message.edit_text(
        text="üíå <b>–¢–∞–∫-—Ç–∞–∫. –ü–æ–º–æ–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!</b>\
        \n\n–ß–µ–º –ª—É—á—à–µ –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç, —Ç–µ–º –±–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã!",
        reply_markup=None
    )
    await callback.message.answer(
        text="<i>–ü–æ–º–Ω–∏—Ç–µ, –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî 1.500. –¢–µ–∫—Å—Ç –±–æ–ª—å—à–µ –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω!</i>",
        reply_markup=keyboard
    )


# --- –°—Ç–∞–¥–∏—è 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞---
@router.message(SupportConnect.to_buyer_text)
async def wrtite_to_buyer_support_text(message: Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer(text=slash_on_state)
    else:
        index = user_question_indices[message.from_user.id]
        messages = messages_response[message.from_user.id][index]
        async with httpx.AsyncClient() as client:            
            response = await client.post(
                f"{message.bot.config['SETTINGS']['backend_url']}answer_question", json={
                    'user_id': int(messages['user_id']),
                    'question': str(messages['question']),
                    'answer_username': message.from_user.username,
                    'answer': message.text[:1500]
                })

        await state.clear()
        if response.status_code == 200:
            await message.answer(
                text=f"‚úÖ <b>–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω!</b>\n\n<i>{message.text[:1500]}</i>\n\n<i>–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /support</i>",
                reply_markup=ReplyKeyboardRemove()
            )
            await message.bot.send_message(
                chat_id=int(messages['user_id']),
                text="üíå <b>–í–∞–º –ø—Ä–∏—à—ë–ª –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏!</b>\
                \n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /support –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
        else:
            await message.answer(text=response_server_error, reply_markup=ReplyKeyboardRemove())
        del messages_response[message.from_user.id]
        del user_question_indices[message.from_user.id]
