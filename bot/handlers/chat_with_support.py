import httpx

from datetime import date
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext

from keyboards.inline import support_panel_btns, on_chat_with_support_btn
from configs.answers import *
from .states_group import SupportConnect, not_in_state_filter, cancel_func


router = Router()


# --- –ü–∞–Ω–µ–ª—å —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ---
@router.message(not_in_state_filter, Command("support"))
async def cmd_support(message: Message):
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ insert ---
    async with httpx.AsyncClient() as client:
        response = await client.post(message.bot.config["SETTINGS"]["backend_url"] + 'create_buyer', json={
            "user_id": message.from_user.id,
            'username': message.from_user.username
        })
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤–µ–ª–µ–≥–∏–∏ ---
        privilege_res = await client.get(
            f"{message.bot.config['SETTINGS']['backend_url']}get_privilege?user_id={message.from_user.id}"
        )
        if response.status_code == 200 and privilege_res.status_code == 200:
            if privilege_res.json() == 'admin' or privilege_res.json() == 'support':
                await message.answer(
                    f"üíå <b>–ì–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?</b>\
                    \n\n–í—ã ‚Äî –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–≤—è–∑—å —Å–æ —Å–≤–æ–∏–º–∏ –∫–æ–ª–ª–µ–≥–∞–º–∏ —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω—ã–π —á–∞—Ç –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è üòâ\
                    \n\n<i>–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–π, –¥–∞–±—ã —Ä–µ—à–∏—Ç—å –≤–æ–∑–Ω–∏–∫—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã!</i>",
                    reply_markup=support_panel_btns().as_markup()
                )
            else:
                async with httpx.AsyncClient() as client:
                    response = await client.get(
                        f"{message.bot.config['SETTINGS']['backend_url']}get_messages_on_support?user_id={message.from_user.id}"
                    )

                if response.status_code == 200:
                    messages = response.json()
                    if messages and len(messages) > 0:
                        first_message = messages[0] 

                        await message.answer(
                            f"üì§ <b>–í–∞—à –∫—Ä–∞–π–Ω–∏–π –≤–æ–ø—Ä–æ—Å:</b>\
                            \n<i>{first_message['question']}</i>\
                            \n<b>–î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è (–ú–°–ö):</b> <i>{first_message['question_date']}</i>\
                            \n\nüì• <b>–û—Ç–≤–µ—Ç–∏–ª: @{first_message['answer_username']}</b>\
                            \n<i>{first_message['answer'] if first_message['answer'] else '‚Äî'}</i>\
                            \n<b>–î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (–ú–°–ö):</b> <i>{first_message['answer_date'] if first_message['answer_date'] else '‚Äî'}</i>",
                            reply_markup=on_chat_with_support_btn().as_markup()
                        )
                    else:
                        await message.answer(
                            text="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
                            reply_markup=on_chat_with_support_btn().as_markup()
                        )
                else:
                    await message.answer(text=response_server_error)
        else:
            await message.answer(text=response_server_error)


# --- –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ---
@router.message(F.text == cancel_support_write_button_kb)
async def cancel_connect_with_support_handler(message: Message, state: FSMContext):
    await cancel_func(message=message, state=state)
    await message.answer(
        "‚úÖ –ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
        reply_markup=ReplyKeyboardRemove()
    )
    await cmd_support(message)
    

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ---
@router.callback_query(not_in_state_filter, F.data == "wrtite_to_support")
async def wrtite_to_support_btn(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SupportConnect.support_text)
    # --- –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã [cancel] ---
    kb = [[KeyboardButton(text=cancel_support_write_button_kb)]]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ü—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã"
    )
    await callback.message.answer(
        text="üíå <b>–¢–∞–∫-—Ç–∞–∫. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º!</b>\
        \n\n–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É. –ß–µ–º –ª—É—á—à–µ –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω –≤–æ–ø—Ä–æ—Å, —Ç–µ–º –±–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã!\
        \n\n<i>–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî 1.500. –¢–µ–∫—Å—Ç –±–æ–ª—å—à–µ –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω!</i>",
        reply_markup=keyboard
    )


# --- –°—Ç–∞–¥–∏—è 1. –ü–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ---
@router.message(SupportConnect.support_text)
async def write_to_support_text(message: Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer(text=slash_on_state)
    else:
        async with httpx.AsyncClient() as client:            
            response = await client.post(
                f"{message.bot.config['SETTINGS']['backend_url']}to_send_question", json={
                    'user_id': message.from_user.id,
                    'question': message.text[:1500],
                    'question_data': str(date.today())
                })

        await state.clear()
        if response.status_code == 422:
            await message.answer(
                text=f"‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å: <i>{message.text[:1500]}?</i> –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω!\n\n<i>–û—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø–∞–Ω–µ–ª–µ –∑–∞–ø—Ä–æ—Å–æ–≤.</i>",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await message.answer(text=response_server_error, reply_markup=ReplyKeyboardRemove())

