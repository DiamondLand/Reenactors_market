import httpx
import validators
import re

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from PIL import Image
from io import BytesIO

from keyboards.inline import —Åompletion_add_product_btns
from configs.categories import *
from configs.answers import *
from configs.patterns import send_product_card
from configs.states_group import AddProduct, not_in_state_filter


router = Router()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ---
@router.callback_query(not_in_state_filter, F.data == "add_product_to_moderation")
async def add_product_to_moderation_btn(callback: CallbackQuery, state: FSMContext):
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ---
    async with httpx.AsyncClient() as client:
        cheak_seller_response = await client.get(
            f"{callback.bot.config['SETTINGS']['backend_url']}get_seller?user_id={callback.from_user.id}"
        )

    if cheak_seller_response.status_code == 200:
        if cheak_seller_response.json() is None:
            await callback.message.edit_text(
                text="–ü–æ—Ö–æ–∂–µ —É –í–∞—Å <b>–Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞</b>, –Ω–æ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\
                \n\n<i>–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /start –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</i>",
                reply_markup=None
            )
        else:
            # --- –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã [cancel] ---
            kb = [[KeyboardButton(text=cancel_button_kb)]]
            keyboard = ReplyKeyboardMarkup(
                keyboard=kb,
                resize_keyboard=True,
                input_field_placeholder="–ü—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã"
            )
            await callback.message.edit_text(
                text="üêº <b>–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞!</b>\
                \n\n–•–æ—Ç–∏–º —Å—Ä–∞–∑—É –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å, —á—Ç–æ –ø—Ä–µ–∂–¥–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ, –æ–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 5-–∏ —á–∞—Å–æ–≤!",
                reply_markup=None
            )
            await callback.message.answer(
                text="<b>–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–≤–∞—Ä?</b>\
                \n\n<i>–ü–æ–º–Ω–∏—Ç–µ, –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî 1.500. –¢–µ–∫—Å—Ç –±–æ–ª—å—à–µ –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω!</i>",
                reply_markup=keyboard
            )
            await state.set_state(AddProduct.name)

    else:
        await callback.answer(text=response_server_error)


# --- –°—Ç–∞–¥–∏—è 1. –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è ---
@router.message(AddProduct.name)
async def get_product_name(message: Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer(text=slash_on_state)
    else:
        data = await state.get_data()        
        data['product_name'] = message.text[:50]

        await state.update_data(data)
        await message.answer(
            text=f"<b>–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>\
            \n\n<i>–ü–æ–º–Ω–∏—Ç–µ, –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî 100. –¢–µ–∫—Å—Ç –±–æ–ª—å—à–µ –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω!</i>"
        )
        await state.set_state(AddProduct.description)


# --- –°—Ç–∞–¥–∏—è 2. –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è ---
@router.message(AddProduct.description)
async def get_product_description(message: Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer(text=slash_on_state)
    else:
        data = await state.get_data()

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ ---
        if not data:
            await message.answer(text=no_state)
            return
         
        data['product_description'] = message.text[:100]

        await state.update_data(data)
        await message.answer(
            text=f"–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç <b>{data.get('product_name', '').lower()}</b>?\
            \n\n<i>–ù–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –∫–∞–∫ —Ü–µ–Ω–∞ –≤ –†–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö!</i>"
        )
        await state.set_state(AddProduct.price)


# --- –°—Ç–∞–¥–∏—è 3. –í–≤–æ–¥ —Ü–µ–Ω—ã ---
@router.message(AddProduct.price)
async def get_product_price(message: Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer(text=slash_on_state)
    else:
        data = await state.get_data()

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ ---
        if not data:
            await message.answer(text=no_state)
            return
        
        only_numbers = re.sub(r'\D', '', message.text)

        if len(str(only_numbers)) >= 1:
            if 100 <= int(only_numbers) <= 100000:
                data['product_price'] = only_numbers

                await state.update_data(data)
                await message.answer(
                    text=f"<b>–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞...</b>\
                    \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:\
                    \n\n‚û°Ô∏è <i>{', '.join(category)}</i>"
                )
                await state.set_state(AddProduct.category)
            else:
                await message.answer(
                    text=f"‚ùå <b>–û–≥–æ-–≥–æ!</b>\
                    \n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å —Ç–æ–≤–∞—Ä –¥–µ—à–µ–≤–ª–µ 100‚ÇΩ –∏–ª–∏ –∂–µ –¥–æ—Ä–æ–∂–µ 100.000‚ÇΩ!\
                    \n\n<i>–ù–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –∫–∞–∫ —Ü–µ–Ω–∞ –≤ –†–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö!</i>"
                )
        else:
            await message.answer(
                text="‚ùå <b>–ù—É —ç—Ç–æ –∂–µ –Ω–µ —Ü–µ–Ω–∞...</b>\
                \n\n–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.\
                \n\n<i>–ù–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –∫–∞–∫ —Ü–µ–Ω–∞ –≤ –†–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª—è—Ö!</i>"
            )


# --- –°—Ç–∞–¥–∏—è 4. –í–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@router.message(AddProduct.category)
async def get_product_category(message: Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer(text=slash_on_state)
    else:
        data = await state.get_data()

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ ---
        if not data:
            await message.answer(text=no_state)
            return
        
        if message.text.lower() in category:
            data['product_category'] = message.text
        
            await state.update_data(data)
            await message.answer(
                text=f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –∫–∞–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é...</b>\
                \n\n‚û°Ô∏è <i>{', '.join(word.capitalize() for word in subcategory)}</i>"
            )
            await state.set_state(AddProduct.subcategory)
        else:
            await message.answer(
                text=f"‚ùå <b>–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç...</b>\
                \n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞!\
                \n\n‚û°Ô∏è <i>{', '.join(category)}</i>"
            )


# --- –°—Ç–∞–¥–∏—è 5. –í–≤–æ–¥ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@router.message(AddProduct.subcategory)
async def get_product_subcategory(message: Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer(text=slash_on_state)
    else:
        data = await state.get_data()

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ ---
        if not data:
            await message.answer(text=no_state)
            return
        
        if message.text.lower() in subcategory:
            data['product_subcategory'] = message.text
        
            await state.update_data(data)
            await message.answer(
                text=f"<b>–ö–∞–∫–∞—è –ø–æ–¥–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞?</b>\
                \n\n–î–∞-–¥–∞, –∏ —Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç!\
                \n\n‚û°Ô∏è <i>{', '.join(subsubcategory)}</i>"
            )
            await state.set_state(AddProduct.subsubcategory)
        else:
            await message.answer(
                text=f"‚ùå <b>–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç...</b>\
                \n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞!\
                \n\n‚û°Ô∏è <i>{', '.join(word.capitalize() for word in subcategory)}</i>"
            )


# --- –°—Ç–∞–¥–∏—è 6. –í–≤–æ–¥ –ø–æ–¥–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@router.message(AddProduct.subsubcategory)
async def get_product_subsubcategory(message: Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer(text=slash_on_state)
    else:
        data = await state.get_data()

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ ---
        if not data:
            await message.answer(text=no_state)
            return
        
        if message.text.lower() in subsubcategory:
            data['product_subsubcategory'] = message.text
        
            await state.update_data(data)
            await message.answer(
                text=f"–ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è url —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞:"
            )
            await state.set_state(AddProduct.image_url)
        else:
            await message.answer(
                text=f"‚ùå <b>–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç...</b>\
                \n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞–ª–∏ –ø–æ–¥–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞!\
                \n\n‚û°Ô∏è <i>{', '.join(subsubcategory)}</i>"
            )


# --- –°—Ç–∞–¥–∏—è 7. –í–≤–æ–¥ —Å—Å—ã–ª–∫–∏ ---
@router.message(AddProduct.image_url)
async def get_product_image_url(message: Message, state: FSMContext):
    if message.text.startswith("/"):
        await message.answer(text=slash_on_state)
    else:
        data = await state.get_data()

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ ---
        if not data:
            await message.answer(text=no_state)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL
        if not validators.url(message.text):
            await message.answer(
                text="‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL!</b>\
                \n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(message.text)
                response.raise_for_status()  # –í—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ 200 OK
                Image.open(BytesIO(response.content))
        except (IOError, Exception):
            await message.answer(
                text="‚ùå <b>–≠—Ç–æ –∂–µ –Ω–µ —Ñ–æ—Ç–æ!</b>\
                \n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞!"
            )
            return

        data['product_image_url'] = message.text
        await state.update_data(data)
        
        send_product_card_text = send_product_card(
            name=data.get('product_name', ''),
            description=data.get('product_description', ''),
            price=data.get('product_price', ''),
            category=data.get('product_category', ''),
            subcategory=data.get('product_subcategory', ''),
            subsubcategory=data.get('product_subsubcategory', ''),
            prev_send=True
        )
        await message.answer_photo(
            photo=message.text,
            caption=send_product_card_text,
            reply_markup=—Åompletion_add_product_btns().as_markup(),
        )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ---
@router.callback_query(F.data == "accept_add_product")
async def accept_add_product_btn(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–¥–∏–∏ ---
    if not data:
        await callback.message.answer(text=no_state)
        return
    
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ insert ---
    async with httpx.AsyncClient() as client:
        # --- –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ ---
        company_name_response = await client.get(
            f"{callback.bot.config['SETTINGS']['backend_url']}get_seller?user_id={callback.from_user.id}"
        )
        add_product_response = await client.post(
            f"{callback.bot.config['SETTINGS']['backend_url']}add_product", json={
                'product_name': data.get('product_name', ''),
                'product_description': data.get('product_description', ''),
                'product_price': data.get('product_price', ''),
                'product_category': data.get('product_category', ''),
                'product_subcategory': data.get('product_subcategory', ''),
                'product_subsubcategory': data.get('product_subsubcategory', ''),
                'product_image_url': data.get('product_image_url', ''),
                'company_name': company_name_response.json()['company_name'],
        })

    await state.clear()
    if company_name_response.status_code == add_product_response.status_code == 200:
        await callback.bot.delete_message(
            chat_id=callback.message.chat.id, 
            message_id=callback.message.message_id
        )
        await callback.message.answer(
            text="‚úÖ –¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –º–µ–¥–ª—è, —Å–æ–æ–±—â–∏–º –≤–∞–º!",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await callback.message.answer(
            text=response_server_error,
            reply_markup=ReplyKeyboardRemove()
        )
        