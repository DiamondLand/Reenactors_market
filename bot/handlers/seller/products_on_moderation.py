import httpx

from aiogram import Router, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, CallbackQuery

from configs.answers import *
from configs.states_group import not_in_state_filter
from keyboards.inline import seller_products_on_moderation_btns
from configs.patterns import send_product_card


router = Router()
products_indices = {}
seller_products_on_moderation_response = {}

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ ---
async def display_card(res, callback: CallbackQuery = None):
    await callback.message.edit_text(
        text=send_product_card(
            name=res['product_name'],
            description=res['product_description'],
            price=res['product_price'],
            prev_send=True,
            category=res['product_category'],
            subcategory=res['product_subcategory'],
            subsubcategory=res['product_subsubcategory']
        ),
        reply_markup=seller_products_on_moderation_btns().as_markup()
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏---
@router.callback_query(not_in_state_filter, F.data == "cheak_product_on_moderation")
async def cheak_product_on_moderation_btn(callback: CallbackQuery):
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ ---
    async with httpx.AsyncClient() as client:
        seller_response = await client.get(
            f"{callback.bot.config['SETTINGS']['backend_url']}get_seller?user_id={callback.from_user.id}"
        )

    if seller_response.status_code == 200:
        if seller_response.json() is None:
            await callback.message.edit_text(
                text="–ü–æ—Ö–æ–∂–µ —É –í–∞—Å <b>–Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞</b>, –Ω–æ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\
                \n\n<i>–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /start –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</i>",
                reply_markup=None
            )
        else:
            # --- –ë–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ---
            async with httpx.AsyncClient() as client:
                get_company_products_on_moderation = await client.get(
                    f"{callback.bot.config['SETTINGS']['backend_url']}get_company_products_on_moderation?company_name={seller_response.json()['company_name']}"
                )
            if get_company_products_on_moderation.status_code == 200:

                company_products_on_moderation = get_company_products_on_moderation.json()
                seller_products_on_moderation_response[callback.from_user.id] = company_products_on_moderation
                products_indices[callback.from_user.id] = 0

                if company_products_on_moderation and len(company_products_on_moderation) > 0:
                    await display_card(res=company_products_on_moderation[0], callback=callback)
                else:
                    await callback.message.answer(
                        text="–£ –í–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–≤–∞—Ä—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏. –í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ –æ–Ω–∏ —É–∂–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ ü§©",
                    )
            else:
                await callback.answer(text=response_server_error)
    else:
        await callback.answer(text=response_server_error)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ –î–ê–õ–ï–ï ---
@router.callback_query(not_in_state_filter, F.data == "next_on_seller_products_on_moderation")
async def next_on_seller_products_on_moderation_btn(callback: CallbackQuery):
    user_id = callback.from_user.id
    messages = seller_products_on_moderation_response[user_id]
    current_index = products_indices.get(user_id, 0)

    if messages and len(messages) > current_index + 1:
        products_indices[user_id] = current_index + 1
        await display_card(res=messages[current_index + 1], callback=callback)
    else:
        await callback.answer(
            text="–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!", 
            show_alert=True
        )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫–∏ –ù–ê–ó–ê–î ---
@router.callback_query(not_in_state_filter, F.data == "back_on_seller_products_on_moderation")
async def back_on_seller_products_on_moderation_btn(callback: CallbackQuery):
    user_id = callback.from_user.id
    if products_indices.get(user_id) is not None:
        current_index = products_indices[user_id]
        if current_index > 0:
            products_indices[user_id] -= 1
            messages = seller_products_on_moderation_response[user_id]
            await display_card(res=messages[current_index - 1], callback=callback)
        else:
            await callback.answer(
                text="–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!", 
                show_alert=True
            )
    else:
        await callback.answer(
            text="–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞!", 
            show_alert=True
        )